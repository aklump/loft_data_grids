var tipuesearch = {"pages":[{"title":"Changelog","text":"  There are no plans to add any new features to this project.  All notable changes to this project will be documented in this file.  The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.  [0.5.0] - 2020-02-22  Changed   Replaced PhpExcel with PhpSpreadsheet to address https:\/\/github.com\/aklump\/loft_data_grids\/issues\/3.   Removed   Support for PHP &lt; 7.1  ","tags":"","url":"CHANGELOG.html"},{"title":"Summary","text":"  This package is a PHP object-oriented solution for modelling data in two (rows + columns) or three dimensions (rows + columns + pages).  It can be thought of like a spreadsheet.  It allows a single data class ExportData to be used to organize your data in a grid, with various output styles Exporter so you can easily get a .csv file or a .xlsx file, among many others.  See the code for more documentation.  Requirements   &#62;= Php 5.3.0   Installation   Please install necessary dependencies using Composer. Navigate to the root of this package and type: composer install   Documentation   Refer to the Doxygene documentation included in this package.   Automated Tests  PhpUnit   Run the PhpUnit tests using phpunit.xml in the directory tests\/phpunit\/   Legacy: Simpletest   Ensure you have downloaded a copy of simpletest as tests\/simpletest\/simpletest\/ directory. Run php all_tests.php from the CLI using a supported PHP version. You should see:  all_tests.php OK Test cases run: 1\/1, Passes: 32, Failures: 0, Exceptions: 0    Example Usage  Building a data object  In this example we'll build a 2 paged model, the first page contains two columns (names and ages) of three people.  The second page will contain two rows of vehicle information (color and make).  $obj = new ExportData();  \/\/ By default we're on page 0, row 0. $obj-&gt;add('Name', 'Aaron')-&gt;add('Age', 39)-&gt;next(); $obj-&gt;add('Name', 'Hillary')-&gt;add('Age', 37)-&gt;next(); $obj-&gt;add('Name', 'Maia')-&gt;add('Age', 7)-&gt;next();  \/\/ Switch to page 1; we'll be placed on row 0 when the new page is created. $obj-&gt;setPage(1); $obj-&gt;add('Color', 'Black')-&gt;add('Make', 'Subaru')-&gt;next(); $obj-&gt;add('Color', 'White')-&gt;add('Make', 'Hyundai')-&gt;next();   Accessing data from the object  $obj-&gt;setPage(0)-&gt;setPointer(0)-&gt;getValue('Name') === 'Aaron' $obj-&gt;getValue('Name') === 'Aaron' $obj-&gt;setPointer(2)-&gt;getValue('Name') === 'Maia' $obj-&gt;setPointer(0)-&gt;get() === array('Name' =&gt; 'Aaron', 'Age' =&gt; 39)  $obj-&gt;setPage(1)-&gt;setPointer(1)-&gt;getValue('Color') === 'White'   Exporting data to other formats  And now to get that as a CSV file we do...  $exporter = new CSVExporter($obj); $csv_string = $exporter-&gt;export();   Or to get it as JSON...  $exporter = new JSONExporter($obj); $json_string = $exporter-&gt;export();   Or any of the other exporter classes.  Saving to File  use AKlump\\LoftDataGrids\\XLSXExporter;  $exporter = new XLSXExporter($obj, 'users'); $exporter-&gt;saveFile();   Contact   In the Loft Studios Aaron Klump - Developer PO Box 29294 Bellingham, WA 98228-1294 aim: theloft101 skype: intheloftstudios d.o: aklump http:\/\/www.InTheLoftStudios.com  ","tags":"","url":"README.html"},{"title":"Exporters: objects as values","text":"  Exporters can handle objects if they implement the objectHandler method.  Exporters can handle \\DateTime objects if they set a value for 'dateFormat'. ","tags":"","url":"objects.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"}]};
